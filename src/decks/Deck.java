package decks;

import cards.Card;

import java.util.Random;

/**
 * Represents a deck of standard playing cards.
 *
 * DO NOT EDIT THIS FILE!
 *
 * @author Josh Archer
 * @version 1.0
 */
public class Deck
{
    private static final int SHUFFLES = 100;
    private Card[] cards;
    private int nextCardIndex;

    /**
     * Accepts an array of Card objects.
     *
     * @param cards an array of Card objects. These should be split
     *              up among the four suits and 14 ranks.
     * @throws IllegalStateException if the array of Card objects is not length 52,
     *              the standard length of a deck of cards
     */
    public Deck(Card[] cards)
    {
        if (cards.length != 52)
        {
            throw new IllegalStateException("A standard deck of cards must have 52 cards");
        }

        this.cards = cards;
        nextCardIndex = cards.length - 1;
    }

    /**
     * Shuffles the deck of cards, randomizing the position
     * of elements. Shuffling the deck also returns all cards
     * to the deck so that they can be dealt again.
     */
    public void shuffle()
    {
        Random random = new Random();

        for (int i = 0; i <= SHUFFLES; i++)
        {
            int firstIndex = random.nextInt(cards.length);
            int secondIndex = random.nextInt(cards.length);
            swap(firstIndex, secondIndex);
        }
        nextCardIndex = cards.length - 1;
    }

    private void swap(int indexOne, int indexTwo)
    {
        Card temp = cards[indexOne];
        cards[indexOne] = cards[indexTwo];
        cards[indexTwo] = temp;
    }

    /**
     * Returns the number of cards still in the deck
     * after assembling the deck using the constructor
     * and using deal() to remove cards.
     *
     * @return the number of cards that can still be dealt
     */
    public int numCards()
    {
        return nextCardIndex + 1;
    }

    /**
     * Deals a card from the deck. It is advised to call the
     * shuffle() method before returning cards with deal().
     *
     * @return the card at the top of the deck
     * @throws IllegalStateException if deal() is called when
     *      there are no more cards in the deck
     */
    public Card deal()
    {
        if (nextCardIndex == -1)
        {
            throw new IllegalStateException("Deck is empty!");
        }

        Card dealtCard = cards[nextCardIndex];
        nextCardIndex--;
        return dealtCard;
    }
}
